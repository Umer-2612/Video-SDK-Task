# Notification Service Setup and Commands Guide

## Initial Setup (First Time Only)
1. Install dependencies:
```bash
npm install
```

2. Create .env file from example:
```bash
cp .env.example .env
```

3. Build the TypeScript code:
```bash
npm run build
```

## Starting the Project
1. Start Elasticsearch, Kafka, and Zookeeper first:
```bash
# Start Elasticsearch
docker-compose up -d elasticsearch

# Wait for Elasticsearch to be ready (usually takes 30-45 seconds)
# Check Elasticsearch health
curl http://localhost:9200/_cluster/health

# Start Kafka and Zookeeper
docker-compose up -d zookeeper kafka

# Wait for Kafka to be ready (usually takes 15-30 seconds)
# You can check logs to ensure it's ready
docker-compose logs -f kafka
```

2. Once the above services are ready, start the application:
```bash
# Start the application
docker-compose up -d app

# Check application logs
docker-compose logs -f app
```

3. Verify all services are running:
```bash
docker-compose ps
```

Expected services and their states:
- elasticsearch: healthy
- zookeeper: running
- kafka: running
- app: running

## Stopping the Project
1. Stop all services:
```bash
docker-compose down
```

2. Stop and remove volumes (if needed to clean data):
```bash
docker-compose down -v
```

## Development Commands
1. Rebuild the application:
```bash
npm run build
```

2. Restart only the application container:
```bash
docker-compose restart app
```

3. View application logs:
```bash
docker-compose logs -f app
```

## Testing API Endpoints
1. Create a test user:
```bash
curl -X POST http://localhost:3000/api/v1/users \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "test123",
    "email": "test@example.com",
    "name": "Test User"
  }'
```

2. Set up notification preferences:
```bash
curl -X PUT http://localhost:3000/api/v1/notification-preferences/test123 \
  -H "Content-Type: application/json" \
  -d '{
    "channels": {
      "email": {
        "enabled": true,
        "quietHours": {
          "start": "22:00",
          "end": "08:00"
        },
        "limits": {
          "hourly": 5,
          "daily": 20
        }
      },
      "sms": {
        "enabled": true,
        "limits": {
          "hourly": 2,
          "daily": 10
        }
      },
      "push": {
        "enabled": true
      }
    },
    "globalQuietHours": {
      "enabled": true,
      "start": "23:00",
      "end": "07:00"
    }
  }'
```

3. Send a test notification:
```bash
curl -X POST http://localhost:3000/api/v1/notifications/notify \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "test123",
    "type": "email",
    "category": "system",
    "priority": "high",
    "title": "Test Notification",
    "content": "This is a test notification",
    "message": "Hello, this is a test!"
  }'
```

## Troubleshooting
1. If containers aren't starting:
   - Check Docker daemon is running
   - Check ports 3000, 9092, 9200 are free

2. If application isn't responding:
   - Check container logs: `docker-compose logs app`
   - Rebuild and restart: 
     ```bash
     npm run build
     docker-compose restart app
     ```

3. To reset everything and start fresh:
```bash
docker-compose down -v
docker-compose up -d
```

## API Documentation
- Swagger UI: http://localhost:3000/docs
- API Base URL: http://localhost:3000/api/v1
